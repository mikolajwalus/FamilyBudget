@using FamilyBudget.Client.Helpers;
@using FamilyBudget.Client.Services;
@using FamilyBudget.Client.Validators
@using FamilyBudget.Shared.Budget;
@using FamilyBudget.Shared.BudgetEntries;
@using FamilyBudget.Shared.Enums;

@page "/BudgetDashboard/{id:guid}"

@inject NotificationService NotificationService;
@inject IBudgetService budgetService;
@inject IBudgetEntriesService budgetEntriesService;
@inject IBudgetEntryCategoriesService budgetEntryCategoriesService;


<PageTitle>Budget sumary</PageTitle>



@if (Entries is null || Budget is null || Categories is null)
{
    <h3>Loading...</h3>
} 
else
{
    <div class="container-fluid">
        <RadzenText TextStyle="TextStyle.H2" TagName="TagName.H2" Class="my-4">
            <strong>@Budget.Name</strong>
        </RadzenText>
        <div class="mb-1 row">
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H4">
                 <p>Current balance:</p>
                <p class="@TextHelpers.GetTextColorBasedOnValue(Budget.Balance)">
                    @TextHelpers.FormatMoneyToDisplay(Budget.Balance)
                </p>
            </RadzenText>
        </div>
        <div class="mb-3 row">
            <div class="py-2 px-0">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Define type</RadzenText>
                <RadzenDropDown Data="@EntriesTypes" @bind-Value="@SelectedEntriesType" Change=@(args => ReloadGridData()) />
            </div>
            <div class="py-2 px-0">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select category</RadzenText>
                <RadzenDropDown AllowClear="true" Data="@Categories" @bind-Value="@SelectedCategoryId" 
                    ValueProperty="Id" TextProperty="Name" Change=@(args => ReloadGridData()) />
            </div>
        </div>

        <div class="row">
            <RadzenDataGrid @ref="grid" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="false" EditMode="DataGridEditMode.Single"
                        Data="@Entries" TItem="BudgetEntryDto" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Count=@Count IsLoading=@IsLoading LoadData="@OnLoadData" 
                        ShowPagingSummary="true">
                <Columns>
                    <RadzenDataGridColumn TItem="BudgetEntryDto" Property="MoneyAmount" Title="Money amount" Width="200px">
                        <Template Context="entry">
                            <span class="@TextHelpers.GetTextColorBasedOnValue(entry.MoneyAmount)">
                                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", entry.MoneyAmount)
                            </span> 
                        </Template>
                        <EditTemplate Context="entry">
                            <RadzenNumeric style="display: block" Name="MoneyAmount" @bind-Value="entry.MoneyAmount" />
                            <NotZeroValidator Popup="true" Component="MoneyAmount" Style="position: absolute" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BudgetEntryDto" Property="CategoryName" Title="Category" Width="220px">
                        <EditTemplate Context="entry">
                            <RadzenDropDown @bind-Value="entry.CategoryName" Data="@Categories" ValueProperty="Name" TextProperty="Name" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BudgetEntryDto" Property="CreatedAt" Title="Created at" Width="120px" />
                    <RadzenDataGridColumn TItem="BudgetEntryDto" Property="LastUpdatedAt" Title="Last updated at" Width="120px" />
                    <RadzenDataGridColumn TItem="BudgetEntryDto" Context="entry" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="entry">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" 
                                Click="@(args => EditRow(entry))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" 
                                Click="@(args => DeleteRow(entry))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="entry">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(entry))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" 
                                Click="@((args) => CancelEdit(entry))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
        <div class="py-3">
            <RadzenButton Click=@(args => InsertRow()) Text="Add new" ButtonStyle="ButtonStyle.Primary" />
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    RadzenDataGrid<BudgetEntryDto> grid;
    int Count;
    int CurrentPage = 1;
    int PageSize = 5;
    bool IsLoading = false;
    IEnumerable<string> EntriesTypes = Enum.GetNames(typeof(BudgetEntriesType));
    string SelectedEntriesType = BudgetEntriesType.All.ToString();
    List<BudgetEntryCategoryDto> Categories;
    Guid SelectedCategoryId;

    BudgetDto Budget;
    List<BudgetEntryDto> Entries;

    protected override async Task OnInitializedAsync()
    {
        var categories = await budgetEntryCategoriesService.GetAll();
        Categories = categories;
    }

    protected override async Task OnParametersSetAsync()
    {
        var budget = await budgetService.GetBudget(Id);

        var dto = new BudgetEntriesRequestDto
            {
                BudgetId = Id,
                PageNumber = CurrentPage,
                PageSize = PageSize
            };

        var budgetEntries = await budgetEntriesService.GetBudgetEntries(dto);

        Budget = budget;
        Entries = budgetEntries.Entries;
        Count = budgetEntries.EntriesPagination.TotalCount;
    }


    async Task EditRow(BudgetEntryDto entry)
    {
        categoryNameBeforEdit = entry.CategoryName;
        moneyAmountBeforeEdit = entry.MoneyAmount;
        entryToUpdate = entry;
        await grid.EditRow(entry);
    }

    async Task OnUpdateRow(BudgetEntryDto entry)
    {
        if (entry == entryToInsert)
        {
            entryToInsert = null;
        }

        entryToUpdate = null;

        var categoryId = Categories.Where(x => x.Name == entry.CategoryName).First().Id;

        var dto = new BudgetEntryForUpdateDto
        {
            Id = entry.Id,
            CategoryId = categoryId,
            MoneyAmount = entry.MoneyAmount
        };

        await budgetEntriesService.UpdateEntry(dto);

        Budget.Balance -= moneyAmountBeforeEdit;
        Budget.Balance += entry.MoneyAmount;
    }

    async Task SaveRow(BudgetEntryDto entity)
    {
        await grid.UpdateRow(entity);
    }

    void CancelEdit(BudgetEntryDto entry)
    {
        if (entry == entryToInsert)
        {
            entryToInsert = null;
        }
        else
        {
            entryToUpdate = null;
            entry.CategoryName = categoryNameBeforEdit;
            entry.MoneyAmount = moneyAmountBeforeEdit;
        }

        grid.CancelEditRow(entry);
    }

    async Task DeleteRow(BudgetEntryDto entry)
    {
        if (entry == entryToInsert)
        {
            entryToInsert = null;
        }

        if (entry == entryToUpdate)
        {
            entryToUpdate = null;
        }

        if (Entries.Contains(entry))
        {
            await budgetEntriesService.DeleteEntry(entry.Id);
            Count--;
            Budget.Balance -= entry.MoneyAmount;
            await grid.Reload();
        }
        else
        {
            grid.CancelEditRow(entry);
            await grid.Reload();
        }
    }

    BudgetEntryDto entryToInsert;
    BudgetEntryDto entryToUpdate;
    decimal moneyAmountBeforeEdit; 
    string categoryNameBeforEdit; 

    async Task InsertRow()
    {
        entryToInsert = new BudgetEntryDto()
        {
            CategoryName = Categories.First().Name
        };

        await grid.InsertRow(entryToInsert);
    }

    async Task OnCreateRow(BudgetEntryDto entry)
    {
        IsLoading = true;

        var dto = new BudgetEntryForCreationDto
            {
                BudgetId = Budget.Id,
                CategoryId = GetCategoryIdBasedOnName(entry.CategoryName),
                MoneyAmount = entry.MoneyAmount
            };

        var result = await budgetEntriesService.CreateEntry(dto);

        entry.CreatedAt = result.CreatedAt;
        entry.LastUpdatedAt = result.LastUpdatedAt;

        Count++;
        Budget.Balance += entry.MoneyAmount;

        IsLoading = false;
    }

    async Task OnLoadData(LoadDataArgs args)
    {
        CurrentPage = ((int)Math.Ceiling(args.Skip.Value / (double)PageSize) + 1);

        await ReloadGridData();
    }

    async Task ReloadGridData()
    {
        IsLoading = true;

        var dto = new BudgetEntriesRequestDto
        {
            BudgetId = Id,
            EntriesType = Enum.Parse<BudgetEntriesType>(SelectedEntriesType),
            PageNumber = CurrentPage,
            PageSize = PageSize
        };

        if(SelectedCategoryId != Guid.Empty)
        {
            dto.CategoryId = SelectedCategoryId;
        }

        var result = await budgetEntriesService.GetBudgetEntries(dto);

        Entries = result.Entries;
        Count = result.EntriesPagination.TotalCount;

        IsLoading = false;
    }

    private Guid GetCategoryIdBasedOnName(string name) => Categories.Where(x => x.Name == name).First().Id;
}
